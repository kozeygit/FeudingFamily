@namespace FeudingFamily.Components.Pages.PresenterPage

<div class="answer" id="answer-@Ranking" @onclick="Reveal">
    <div class="overlay @(IsRevealed ? "hidden" : "")" id="overlay-@Ranking">
        @Ranking
    </div>
    <span class="answer-ranking">
        @Ranking
    </span>
    <span class="answer-content">
        @Content
    </span>
    <span class="answer-points">
        @Points
    </span>
</div>


<style>
    .answer {
        width: 100%;
        display: flex;
        position: relative;
        align-items: center;
        justify-content: center;
        border: white solid 3px;
        border-radius: 20px;
        overflow: hidden;
        box-shadow: 5px 5px 10px rgb(0, 0, 0, 0.3);

        * {
            color: white;
            font-weight: 400;
            font-size: 30px;
            text-shadow: 2px 2px 5px black;
            text-transform: uppercase;
        }
    }
    
    .overlay {
        position: absolute;
        inset: 0;
        width: 100%;
        height: 100%;
        background-image: linear-gradient(to left,
            rgb(253, 138, 178),
            rgb(252, 195, 157)
        );
    }
    
    .hidden {
        transition: 500ms ease-out;
        translate: -100%;
    }

    .answer-points {
        flex: 2;
        border-left: solid white 3px;
        text-align: center;
    }

    .answer-ranking {
        flex: 1;
        border-right: solid white 3px;
        text-align: center;
    }

    .answer-content {
        flex: 12;
        padding-left: 2rem;
    }
</style>


@code {
    [Parameter] public bool IsRevealed { get; set; }
    [Parameter] public int Ranking { get; set; }
    [Parameter] public string Content { get; set; } = string.Empty;
    [Parameter] public int Points { get; set; }
    [Parameter] public EventCallback OnClick { get; set; }

    private async void Reveal()
    {
        await OnClick.InvokeAsync();
        IsRevealed = !IsRevealed;
    }

}