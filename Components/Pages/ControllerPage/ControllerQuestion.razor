@if (IsRevealed)
{
    <button class="question" @onmousedown=MouseDown @onmouseup=MouseUp @ontouchstart=MouseDown @ontouchend=MouseUp>
        <h1 class="question-content">We asked 100 people:<br> @Content</h1>
    </button>
}
else
{
    <button class="question hidden" @onmousedown=MouseDown @onmouseup=MouseUp @ontouchstart=MouseDown @ontouchend=MouseUp>

        <h1 class="question-content">We asked 100 people:<br> @Content</h1>
    </button>
}

<style>
    .hidden {
        background-color: lightgreen;
    }

    .question {
        overflow: visible;
        border: black solid 2px;
        color: black;
        height: 150px;
        font-size: 1.2rem;
        background-color: lightskyblue;
        display: grid;
        place-items: center;

        h1 {
            font-weight: 600;
            text-transform: uppercase;
            text-align: center;
            padding-inline: 10px;
        }
    }
</style>

@code {
    [Parameter]
    public bool IsRevealed { get; set; }

    [Parameter]
    public string Content { get; set; } = string.Empty;

    [Parameter]
    public EventCallback OnClick { get; set; }

    [Parameter]
    public EventCallback OnHold { get; set; }

    private bool released;
    private int holdDuration = 500;

    public async Task MouseDown()
    {
        released = false;
        await Task.Delay(holdDuration);

        if (released == false) {
            await OnHold.InvokeAsync();
            released = true;
        }
    }

    public async Task MouseUp()
    {
        if (released is false)
        {
            await OnClick.InvokeAsync();
            released = true;
        }
    }
}

