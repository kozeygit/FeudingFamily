@attribute [StreamRendering]
@inject IQuestionService questionSevice

<dialog open="@IsOpen" class="px-4 z-50 max-w-full">

    <h1 class="border-b-red-500 border-b-4 fixed w-screen top-0 left-0 bg-white p-4 font-bold text-center shadow-xl shadow-slate-500">Questions</h1>

    <div class="py-10">

        @if (QuestionsList.Count == 0)
        {
            <p>Loading...</p>
            <p>@QuestionsList.Count</p>
        }
        else
        {
            @foreach (var question in QuestionsList)
            {
                <div class="p-2 border-gray-500 border-b-2 odd:bg-gray-200">
                    <h2>@question.Id: @question.Content</h2>
                </div>
            }
        }
    </div>
    <form class="inset-0 m-auto w-fit flex justify-center gap-2 sticky bottom-4 py-4 px-8 bg-white border-black border-4 rounded-xl shadow-xl shadow-gray-700">
        <input min="0" max="@QuestionsList.Count" type="number" class="rounded-e-none w-32 outline-none border-4 border-gray-500 focus-visible:border-green-500 font-bold py-2 px-4 rounded-xl" @bind-value="@questionId"/>
        <input type="submit" class="rounded-s-none bg-green-500 hover:bg-green-700 text-white font-bold py-2 px-4 rounded-xl" @onclick="HandleSetQuestion" value="Submit"/>
        <button class="bg-red-500 float-right hover:bg-red-700 text-white font-bold py-2 px-4 rounded-xl" @onclick="Close">Close</button>
    </form>

</dialog>

@code {
    [Parameter] public bool IsOpen { get; set; }

    [Parameter] public EventCallback<bool> IsOpenChanged { get; set; }

    [Parameter] public EventCallback<int> SetQuestion { get; set; }

    private int questionId = 0;

    private async Task HandleSetQuestion()
    {
        await SetQuestion.InvokeAsync(questionId);
        await Close();
    }

    private async Task Close()
    {
        IsOpen = false;
        await IsOpenChanged.InvokeAsync(IsOpen);
    }


    public List<Question> QuestionsList { get; set; } = [];

    protected override async Task OnInitializedAsync()
    {
        QuestionsList = await questionSevice.GetQuestionsOnlyAsync();
    }

}