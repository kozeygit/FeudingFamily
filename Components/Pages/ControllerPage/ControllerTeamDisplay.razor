@if (Team is not null)
{
    var fontColor = IsTeamPlaying ? "text-red-500" : "text-black-500";
    if (RoundWinner)
    {
        fontColor = "text-green-600";
    }

    <form class="team @fontColor flex justify-evenly">
        <input @onkeydown=SubmitEditName type="text" @bind=teamName @bind:event=oninput id="team-name" class="team-name">
        <input hidden=true>
        <span>@Team.Points â€¢ @Team.RoundsWon</span>
    </form>
}


<style>
    .team {
        display: grid;
        grid-template-rows: 1fr 1fr;
        place-items: center;
    }

    .team input {
        padding-inline: 0.5rem;
        max-width: 100%;
        min-width: 0;
        field-sizing: fixed;
    }

    .team span {
        margin-inline: 0.5rem;
    }

    .team-name {
        box-sizing: border-box;
        text-align: center;
        max-width: 100%;
        min-width: 0;
    }
</style>

@code {

    // Make input field readonly, add edit button to change input to not readonly
    // change css tyles based on if input is readonly
    // Then when a new name is entered
    // Add old name to variable,
    // check if new name is the same as old, if it is, don't send signalr thing
    // just change input back to readonly

    [Parameter] public TeamDto? Team { get; set; }
    [Parameter] public bool IsTeamPlaying { get; set; } = false;
    [Parameter] public bool RoundWinner { get; set; } = false;
    [Parameter] public EventCallback<string> OnEdit { get; set; }
    private string teamName = string.Empty;

    protected override void OnParametersSet()
    {
        teamName = Team.Name;
    }

    private async Task SubmitEditName(KeyboardEventArgs args)
    {
        if (args.Code != "Enter")
        {
            return;
        }

        await InvokeAsync(StateHasChanged);

        Console.WriteLine("Changing name to: " + teamName);

        if (teamName == Team.Name)
        {
            Console.WriteLine("Name is the same as before");
            await InvokeAsync(StateHasChanged);
            return;
        }

        await OnEdit.InvokeAsync(teamName);
        await InvokeAsync(StateHasChanged);
    }

}